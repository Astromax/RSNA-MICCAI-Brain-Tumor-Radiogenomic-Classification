# -*- coding: utf-8 -*-
"""Circumscribers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J6io7gu7mIDehSMYu6vNlpj9T6y02-Ty
"""

import numpy as np

#Eliminate as much blank space around a 2D slice as possible
def _circumscriber2D(img: np.array) -> np.array:
    """
    img: a 2D numpy array, preferably representing an image with a central object surrounded by blank space
    returns: a 2D numpy array, the original image with as much of the surrounding blank space removed as possible
            without cutting the central object & while maintaining a rectangular shape
    """


    vmin = 0
    hmin = 0
    vlimit, hlimit = img.shape
    
    for i in range(vlimit):
        if np.max(img[i, :]) == 0:
            vmin += 1
        else:
            break
    vmax = vmin + 1
    for i in range(vmin+1, vlimit):
        if np.max(img[i, :]) > 0:
            vmax += 1
        else:
            break

    for j in range(hlimit):
        if np.max(img[:, j]) == 0:
            hmin += 1
        else:
            break
    hmax = hmin + 1
    for j in range(hmin+1, hlimit):
        if np.max(img[:, j]) > 0:
            hmax += 1
        else:
            break
    return img[vmin: vmax, hmin:hmax]

#Eliminate as much blank space around a 3D cube as possible.  This one assumes the purely blank slices were already filtered out
def _circumscriber3D(img: np.array) -> np.array:
    #First is vertical, second is horizontal, third is slices
    """
    img: a 3D numpy array, representing a stack of consecutive images (ex: slices of a Brain MRI) in which there
         is a central object surrounded by blank space
    returns: a 3D numpy array, in which as much of the blank space in the x & y dimensions around the central object
        has been removed without cutting the central object at all & while maintaining a cuboid shape

    Note: this assumes the depth dimension has already been handled, i.e., there are no purely blank images in the stack
    """

    vmin = 0
    vlimit = img.shape[0]
    hmin = 0
    hlimit = img.shape[1]
    
    for i in range(vlimit):
        if np.max(img[i, :, :]) == 0:
            vmin += 1
        else:
            break
    vmax = vmin + 1
    for i in range(vmin+1, vlimit):
        if np.max(img[i, :, :]) > 0:
            vmax += 1
        else:
            break

    for j in range(hlimit):
        if np.max(img[:, j, :]) == 0:
            hmin += 1
        else:
            break
    hmax = hmin + 1
    for j in range(hmin+1, hlimit):
        if np.max(img[:, j, :]) > 0:
            hmax += 1
        else:
            break
    return img[vmin:vmax, hmin:hmax, :]